// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_data_manager.proto

#ifndef PROTOBUF_messages_5fdata_5fmanager_2eproto__INCLUDED
#define PROTOBUF_messages_5fdata_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "messages_robocup_ssl_referee.pb.h"
#include "messages_vision_manager.pb.h"
#include "messages_control.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_5fdata_5fmanager_2eproto();
void protobuf_AssignDesc_messages_5fdata_5fmanager_2eproto();
void protobuf_ShutdownFile_messages_5fdata_5fmanager_2eproto();

class DataPackage;

// ===================================================================

class DataPackage : public ::google::protobuf::Message {
 public:
  DataPackage();
  virtual ~DataPackage();

  DataPackage(const DataPackage& from);

  inline DataPackage& operator=(const DataPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPackage& default_instance();

  void Swap(DataPackage* other);

  // implements Message ----------------------------------------------

  DataPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPackage& from);
  void MergeFrom(const DataPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VisionPackage vision = 1;
  inline bool has_vision() const;
  inline void clear_vision();
  static const int kVisionFieldNumber = 1;
  inline const ::VisionPackage& vision() const;
  inline ::VisionPackage* mutable_vision();
  inline ::VisionPackage* release_vision();
  inline void set_allocated_vision(::VisionPackage* vision);

  // required .SSL_Referee referee = 2;
  inline bool has_referee() const;
  inline void clear_referee();
  static const int kRefereeFieldNumber = 2;
  inline const ::SSL_Referee& referee() const;
  inline ::SSL_Referee* mutable_referee();
  inline ::SSL_Referee* release_referee();
  inline void set_allocated_referee(::SSL_Referee* referee);

  // optional .ControlPackage control = 3;
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 3;
  inline const ::ControlPackage& control() const;
  inline ::ControlPackage* mutable_control();
  inline ::ControlPackage* release_control();
  inline void set_allocated_control(::ControlPackage* control);

  // @@protoc_insertion_point(class_scope:DataPackage)
 private:
  inline void set_has_vision();
  inline void clear_has_vision();
  inline void set_has_referee();
  inline void clear_has_referee();
  inline void set_has_control();
  inline void clear_has_control();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VisionPackage* vision_;
  ::SSL_Referee* referee_;
  ::ControlPackage* control_;
  friend void  protobuf_AddDesc_messages_5fdata_5fmanager_2eproto();
  friend void protobuf_AssignDesc_messages_5fdata_5fmanager_2eproto();
  friend void protobuf_ShutdownFile_messages_5fdata_5fmanager_2eproto();

  void InitAsDefaultInstance();
  static DataPackage* default_instance_;
};
// ===================================================================


// ===================================================================

// DataPackage

// required .VisionPackage vision = 1;
inline bool DataPackage::has_vision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataPackage::set_has_vision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataPackage::clear_has_vision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataPackage::clear_vision() {
  if (vision_ != NULL) vision_->::VisionPackage::Clear();
  clear_has_vision();
}
inline const ::VisionPackage& DataPackage::vision() const {
  // @@protoc_insertion_point(field_get:DataPackage.vision)
  return vision_ != NULL ? *vision_ : *default_instance_->vision_;
}
inline ::VisionPackage* DataPackage::mutable_vision() {
  set_has_vision();
  if (vision_ == NULL) vision_ = new ::VisionPackage;
  // @@protoc_insertion_point(field_mutable:DataPackage.vision)
  return vision_;
}
inline ::VisionPackage* DataPackage::release_vision() {
  clear_has_vision();
  ::VisionPackage* temp = vision_;
  vision_ = NULL;
  return temp;
}
inline void DataPackage::set_allocated_vision(::VisionPackage* vision) {
  delete vision_;
  vision_ = vision;
  if (vision) {
    set_has_vision();
  } else {
    clear_has_vision();
  }
  // @@protoc_insertion_point(field_set_allocated:DataPackage.vision)
}

// required .SSL_Referee referee = 2;
inline bool DataPackage::has_referee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPackage::set_has_referee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPackage::clear_has_referee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPackage::clear_referee() {
  if (referee_ != NULL) referee_->::SSL_Referee::Clear();
  clear_has_referee();
}
inline const ::SSL_Referee& DataPackage::referee() const {
  // @@protoc_insertion_point(field_get:DataPackage.referee)
  return referee_ != NULL ? *referee_ : *default_instance_->referee_;
}
inline ::SSL_Referee* DataPackage::mutable_referee() {
  set_has_referee();
  if (referee_ == NULL) referee_ = new ::SSL_Referee;
  // @@protoc_insertion_point(field_mutable:DataPackage.referee)
  return referee_;
}
inline ::SSL_Referee* DataPackage::release_referee() {
  clear_has_referee();
  ::SSL_Referee* temp = referee_;
  referee_ = NULL;
  return temp;
}
inline void DataPackage::set_allocated_referee(::SSL_Referee* referee) {
  delete referee_;
  referee_ = referee;
  if (referee) {
    set_has_referee();
  } else {
    clear_has_referee();
  }
  // @@protoc_insertion_point(field_set_allocated:DataPackage.referee)
}

// optional .ControlPackage control = 3;
inline bool DataPackage::has_control() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataPackage::set_has_control() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataPackage::clear_has_control() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataPackage::clear_control() {
  if (control_ != NULL) control_->::ControlPackage::Clear();
  clear_has_control();
}
inline const ::ControlPackage& DataPackage::control() const {
  // @@protoc_insertion_point(field_get:DataPackage.control)
  return control_ != NULL ? *control_ : *default_instance_->control_;
}
inline ::ControlPackage* DataPackage::mutable_control() {
  set_has_control();
  if (control_ == NULL) control_ = new ::ControlPackage;
  // @@protoc_insertion_point(field_mutable:DataPackage.control)
  return control_;
}
inline ::ControlPackage* DataPackage::release_control() {
  clear_has_control();
  ::ControlPackage* temp = control_;
  control_ = NULL;
  return temp;
}
inline void DataPackage::set_allocated_control(::ControlPackage* control) {
  delete control_;
  control_ = control;
  if (control) {
    set_has_control();
  } else {
    clear_has_control();
  }
  // @@protoc_insertion_point(field_set_allocated:DataPackage.control)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5fdata_5fmanager_2eproto__INCLUDED
