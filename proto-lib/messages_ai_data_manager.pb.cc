// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_ai_data_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_ai_data_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PathPlanningPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPlanningPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRobotPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRobotPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIDataManagerPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIDataManagerPackage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto() {
  protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_ai_data_manager.proto");
  GOOGLE_CHECK(file != NULL);
  PathPlanningPackage_descriptor_ = file->message_type(0);
  static const int PathPlanningPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, y_),
  };
  PathPlanningPackage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathPlanningPackage_descriptor_,
      PathPlanningPackage::default_instance_,
      PathPlanningPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathPlanningPackage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, _internal_metadata_),
      -1);
  AIRobotPackage_descriptor_ = file->message_type(1);
  static const int AIRobotPackage_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, tactic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, sensorial_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, target_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, target_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, path_planning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, velocity_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, low_kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, high_kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, dribbler_),
  };
  AIRobotPackage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AIRobotPackage_descriptor_,
      AIRobotPackage::default_instance_,
      AIRobotPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, _has_bits_[0]),
      -1,
      -1,
      sizeof(AIRobotPackage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, _internal_metadata_),
      -1);
  AIDataManagerPackage_descriptor_ = file->message_type(2);
  static const int AIDataManagerPackage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIDataManagerPackage, team_),
  };
  AIDataManagerPackage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AIDataManagerPackage_descriptor_,
      AIDataManagerPackage::default_instance_,
      AIDataManagerPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIDataManagerPackage, _has_bits_[0]),
      -1,
      -1,
      sizeof(AIDataManagerPackage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIDataManagerPackage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathPlanningPackage_descriptor_, &PathPlanningPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AIRobotPackage_descriptor_, &AIRobotPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AIDataManagerPackage_descriptor_, &AIDataManagerPackage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto() {
  delete PathPlanningPackage::default_instance_;
  delete PathPlanningPackage_reflection_;
  delete AIRobotPackage::default_instance_;
  delete AIRobotPackage_reflection_;
  delete AIDataManagerPackage::default_instance_;
  delete AIDataManagerPackage_reflection_;
}

void protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036messages_ai_data_manager.proto\"+\n\023Path"
    "PlanningPackage\022\t\n\001x\030\001 \003(\002\022\t\n\001y\030\002 \003(\002\"\306\002"
    "\n\016AIRobotPackage\022\n\n\002id\030\001 \002(\r\022\t\n\001x\030\002 \002(\002\022"
    "\t\n\001y\030\003 \002(\002\022\023\n\013orientation\030\004 \002(\002\022\r\n\005skill"
    "\030\005 \002(\t\022\016\n\006tactic\030\006 \002(\t\022\026\n\016sensorial_info"
    "\030\007 \003(\t\022\020\n\010target_x\030\010 \002(\002\022\020\n\010target_y\030\t \002"
    "(\002\022+\n\rpath_planning\030\n \002(\0132\024.PathPlanning"
    "Package\022\022\n\nvelocity_x\030\013 \001(\002\022\022\n\nvelocity_"
    "y\030\014 \001(\002\022\026\n\016velocity_theta\030\r \001(\002\022\020\n\010low_k"
    "ick\030\016 \001(\002\022\021\n\thigh_kick\030\017 \001(\002\022\020\n\010dribbler"
    "\030\020 \001(\002\"5\n\024AIDataManagerPackage\022\035\n\004team\030\001"
    " \003(\0132\017.AIRobotPackage", 461);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_ai_data_manager.proto", &protobuf_RegisterTypes);
  PathPlanningPackage::default_instance_ = new PathPlanningPackage();
  AIRobotPackage::default_instance_ = new AIRobotPackage();
  AIDataManagerPackage::default_instance_ = new AIDataManagerPackage();
  PathPlanningPackage::default_instance_->InitAsDefaultInstance();
  AIRobotPackage::default_instance_->InitAsDefaultInstance();
  AIDataManagerPackage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5fai_5fdata_5fmanager_2eproto {
  StaticDescriptorInitializer_messages_5fai_5fdata_5fmanager_2eproto() {
    protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  }
} static_descriptor_initializer_messages_5fai_5fdata_5fmanager_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPlanningPackage::kXFieldNumber;
const int PathPlanningPackage::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPlanningPackage::PathPlanningPackage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathPlanningPackage)
}

void PathPlanningPackage::InitAsDefaultInstance() {
}

PathPlanningPackage::PathPlanningPackage(const PathPlanningPackage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PathPlanningPackage)
}

void PathPlanningPackage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPlanningPackage::~PathPlanningPackage() {
  // @@protoc_insertion_point(destructor:PathPlanningPackage)
  SharedDtor();
}

void PathPlanningPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathPlanningPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPlanningPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPlanningPackage_descriptor_;
}

const PathPlanningPackage& PathPlanningPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  return *default_instance_;
}

PathPlanningPackage* PathPlanningPackage::default_instance_ = NULL;

PathPlanningPackage* PathPlanningPackage::New(::google::protobuf::Arena* arena) const {
  PathPlanningPackage* n = new PathPlanningPackage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPlanningPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:PathPlanningPackage)
  x_.Clear();
  y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathPlanningPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathPlanningPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x = 1;
      case 1: {
        if (tag == 13) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_x())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_x;
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // repeated float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_y())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathPlanningPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathPlanningPackage)
  return false;
#undef DO_
}

void PathPlanningPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathPlanningPackage)
  // repeated float x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->x(i), output);
  }

  // repeated float y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->y(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PathPlanningPackage)
}

::google::protobuf::uint8* PathPlanningPackage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathPlanningPackage)
  // repeated float x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->x(i), target);
  }

  // repeated float y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->y(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathPlanningPackage)
  return target;
}

int PathPlanningPackage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PathPlanningPackage)
  int total_size = 0;

  // repeated float x = 1;
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }

  // repeated float y = 2;
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    total_size += 1 * this->y_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPlanningPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PathPlanningPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathPlanningPackage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPlanningPackage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PathPlanningPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PathPlanningPackage)
    MergeFrom(*source);
  }
}

void PathPlanningPackage::MergeFrom(const PathPlanningPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PathPlanningPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathPlanningPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PathPlanningPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPlanningPackage::CopyFrom(const PathPlanningPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathPlanningPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanningPackage::IsInitialized() const {

  return true;
}

void PathPlanningPackage::Swap(PathPlanningPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPlanningPackage::InternalSwap(PathPlanningPackage* other) {
  x_.UnsafeArenaSwap(&other->x_);
  y_.UnsafeArenaSwap(&other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPlanningPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPlanningPackage_descriptor_;
  metadata.reflection = PathPlanningPackage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPlanningPackage

// repeated float x = 1;
int PathPlanningPackage::x_size() const {
  return x_.size();
}
void PathPlanningPackage::clear_x() {
  x_.Clear();
}
 float PathPlanningPackage::x(int index) const {
  // @@protoc_insertion_point(field_get:PathPlanningPackage.x)
  return x_.Get(index);
}
 void PathPlanningPackage::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:PathPlanningPackage.x)
}
 void PathPlanningPackage::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:PathPlanningPackage.x)
}
 const ::google::protobuf::RepeatedField< float >&
PathPlanningPackage::x() const {
  // @@protoc_insertion_point(field_list:PathPlanningPackage.x)
  return x_;
}
 ::google::protobuf::RepeatedField< float >*
PathPlanningPackage::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:PathPlanningPackage.x)
  return &x_;
}

// repeated float y = 2;
int PathPlanningPackage::y_size() const {
  return y_.size();
}
void PathPlanningPackage::clear_y() {
  y_.Clear();
}
 float PathPlanningPackage::y(int index) const {
  // @@protoc_insertion_point(field_get:PathPlanningPackage.y)
  return y_.Get(index);
}
 void PathPlanningPackage::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:PathPlanningPackage.y)
}
 void PathPlanningPackage::add_y(float value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:PathPlanningPackage.y)
}
 const ::google::protobuf::RepeatedField< float >&
PathPlanningPackage::y() const {
  // @@protoc_insertion_point(field_list:PathPlanningPackage.y)
  return y_;
}
 ::google::protobuf::RepeatedField< float >*
PathPlanningPackage::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:PathPlanningPackage.y)
  return &y_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIRobotPackage::kIdFieldNumber;
const int AIRobotPackage::kXFieldNumber;
const int AIRobotPackage::kYFieldNumber;
const int AIRobotPackage::kOrientationFieldNumber;
const int AIRobotPackage::kSkillFieldNumber;
const int AIRobotPackage::kTacticFieldNumber;
const int AIRobotPackage::kSensorialInfoFieldNumber;
const int AIRobotPackage::kTargetXFieldNumber;
const int AIRobotPackage::kTargetYFieldNumber;
const int AIRobotPackage::kPathPlanningFieldNumber;
const int AIRobotPackage::kVelocityXFieldNumber;
const int AIRobotPackage::kVelocityYFieldNumber;
const int AIRobotPackage::kVelocityThetaFieldNumber;
const int AIRobotPackage::kLowKickFieldNumber;
const int AIRobotPackage::kHighKickFieldNumber;
const int AIRobotPackage::kDribblerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIRobotPackage::AIRobotPackage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AIRobotPackage)
}

void AIRobotPackage::InitAsDefaultInstance() {
  path_planning_ = const_cast< ::PathPlanningPackage*>(&::PathPlanningPackage::default_instance());
}

AIRobotPackage::AIRobotPackage(const AIRobotPackage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AIRobotPackage)
}

void AIRobotPackage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0;
  y_ = 0;
  orientation_ = 0;
  skill_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tactic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_x_ = 0;
  target_y_ = 0;
  path_planning_ = NULL;
  velocity_x_ = 0;
  velocity_y_ = 0;
  velocity_theta_ = 0;
  low_kick_ = 0;
  high_kick_ = 0;
  dribbler_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRobotPackage::~AIRobotPackage() {
  // @@protoc_insertion_point(destructor:AIRobotPackage)
  SharedDtor();
}

void AIRobotPackage::SharedDtor() {
  skill_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tactic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete path_planning_;
  }
}

void AIRobotPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRobotPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRobotPackage_descriptor_;
}

const AIRobotPackage& AIRobotPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  return *default_instance_;
}

AIRobotPackage* AIRobotPackage::default_instance_ = NULL;

AIRobotPackage* AIRobotPackage::New(::google::protobuf::Arena* arena) const {
  AIRobotPackage* n = new AIRobotPackage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIRobotPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:AIRobotPackage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AIRobotPackage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AIRobotPackage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(id_, orientation_);
    if (has_skill()) {
      skill_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tactic()) {
      tactic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    target_x_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(velocity_x_, dribbler_);
    target_y_ = 0;
    if (has_path_planning()) {
      if (path_planning_ != NULL) path_planning_->::PathPlanningPackage::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  sensorial_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AIRobotPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AIRobotPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_orientation;
        break;
      }

      // required float orientation = 4;
      case 4: {
        if (tag == 37) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_skill;
        break;
      }

      // required string skill = 5;
      case 5: {
        if (tag == 42) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill().data(), this->skill().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AIRobotPackage.skill");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tactic;
        break;
      }

      // required string tactic = 6;
      case 6: {
        if (tag == 50) {
         parse_tactic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tactic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tactic().data(), this->tactic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AIRobotPackage.tactic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sensorial_info;
        break;
      }

      // repeated string sensorial_info = 7;
      case 7: {
        if (tag == 58) {
         parse_sensorial_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sensorial_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensorial_info(this->sensorial_info_size() - 1).data(),
            this->sensorial_info(this->sensorial_info_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AIRobotPackage.sensorial_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sensorial_info;
        if (input->ExpectTag(69)) goto parse_target_x;
        break;
      }

      // required float target_x = 8;
      case 8: {
        if (tag == 69) {
         parse_target_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_x_)));
          set_has_target_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_target_y;
        break;
      }

      // required float target_y = 9;
      case 9: {
        if (tag == 77) {
         parse_target_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_y_)));
          set_has_target_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_path_planning;
        break;
      }

      // required .PathPlanningPackage path_planning = 10;
      case 10: {
        if (tag == 82) {
         parse_path_planning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_planning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_velocity_x;
        break;
      }

      // optional float velocity_x = 11;
      case 11: {
        if (tag == 93) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_velocity_y;
        break;
      }

      // optional float velocity_y = 12;
      case 12: {
        if (tag == 101) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_velocity_theta;
        break;
      }

      // optional float velocity_theta = 13;
      case 13: {
        if (tag == 109) {
         parse_velocity_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_theta_)));
          set_has_velocity_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_low_kick;
        break;
      }

      // optional float low_kick = 14;
      case 14: {
        if (tag == 117) {
         parse_low_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_kick_)));
          set_has_low_kick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_high_kick;
        break;
      }

      // optional float high_kick = 15;
      case 15: {
        if (tag == 125) {
         parse_high_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_kick_)));
          set_has_high_kick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_dribbler;
        break;
      }

      // optional float dribbler = 16;
      case 16: {
        if (tag == 133) {
         parse_dribbler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dribbler_)));
          set_has_dribbler();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AIRobotPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AIRobotPackage)
  return false;
#undef DO_
}

void AIRobotPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AIRobotPackage)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float orientation = 4;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->orientation(), output);
  }

  // required string skill = 5;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AIRobotPackage.skill");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->skill(), output);
  }

  // required string tactic = 6;
  if (has_tactic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tactic().data(), this->tactic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AIRobotPackage.tactic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tactic(), output);
  }

  // repeated string sensorial_info = 7;
  for (int i = 0; i < this->sensorial_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensorial_info(i).data(), this->sensorial_info(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AIRobotPackage.sensorial_info");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sensorial_info(i), output);
  }

  // required float target_x = 8;
  if (has_target_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->target_x(), output);
  }

  // required float target_y = 9;
  if (has_target_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->target_y(), output);
  }

  // required .PathPlanningPackage path_planning = 10;
  if (has_path_planning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->path_planning_, output);
  }

  // optional float velocity_x = 11;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->velocity_x(), output);
  }

  // optional float velocity_y = 12;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->velocity_y(), output);
  }

  // optional float velocity_theta = 13;
  if (has_velocity_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->velocity_theta(), output);
  }

  // optional float low_kick = 14;
  if (has_low_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->low_kick(), output);
  }

  // optional float high_kick = 15;
  if (has_high_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->high_kick(), output);
  }

  // optional float dribbler = 16;
  if (has_dribbler()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->dribbler(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AIRobotPackage)
}

::google::protobuf::uint8* AIRobotPackage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AIRobotPackage)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float orientation = 4;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->orientation(), target);
  }

  // required string skill = 5;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AIRobotPackage.skill");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->skill(), target);
  }

  // required string tactic = 6;
  if (has_tactic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tactic().data(), this->tactic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AIRobotPackage.tactic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tactic(), target);
  }

  // repeated string sensorial_info = 7;
  for (int i = 0; i < this->sensorial_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensorial_info(i).data(), this->sensorial_info(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AIRobotPackage.sensorial_info");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->sensorial_info(i), target);
  }

  // required float target_x = 8;
  if (has_target_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->target_x(), target);
  }

  // required float target_y = 9;
  if (has_target_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->target_y(), target);
  }

  // required .PathPlanningPackage path_planning = 10;
  if (has_path_planning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->path_planning_, false, target);
  }

  // optional float velocity_x = 11;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->velocity_x(), target);
  }

  // optional float velocity_y = 12;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->velocity_y(), target);
  }

  // optional float velocity_theta = 13;
  if (has_velocity_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->velocity_theta(), target);
  }

  // optional float low_kick = 14;
  if (has_low_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->low_kick(), target);
  }

  // optional float high_kick = 15;
  if (has_high_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->high_kick(), target);
  }

  // optional float dribbler = 16;
  if (has_dribbler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->dribbler(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AIRobotPackage)
  return target;
}

int AIRobotPackage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AIRobotPackage)
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  if (has_orientation()) {
    // required float orientation = 4;
    total_size += 1 + 4;
  }

  if (has_skill()) {
    // required string skill = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skill());
  }

  if (has_tactic()) {
    // required string tactic = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tactic());
  }

  if (has_target_x()) {
    // required float target_x = 8;
    total_size += 1 + 4;
  }

  if (has_target_y()) {
    // required float target_y = 9;
    total_size += 1 + 4;
  }

  if (has_path_planning()) {
    // required .PathPlanningPackage path_planning = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_planning_);
  }

  return total_size;
}
int AIRobotPackage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AIRobotPackage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000003bf) ^ 0x000003bf) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

    // required float orientation = 4;
    total_size += 1 + 4;

    // required string skill = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->skill());

    // required string tactic = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tactic());

    // required float target_x = 8;
    total_size += 1 + 4;

    // required float target_y = 9;
    total_size += 1 + 4;

    // required .PathPlanningPackage path_planning = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_planning_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[10 / 32] & 64512u) {
    // optional float velocity_x = 11;
    if (has_velocity_x()) {
      total_size += 1 + 4;
    }

    // optional float velocity_y = 12;
    if (has_velocity_y()) {
      total_size += 1 + 4;
    }

    // optional float velocity_theta = 13;
    if (has_velocity_theta()) {
      total_size += 1 + 4;
    }

    // optional float low_kick = 14;
    if (has_low_kick()) {
      total_size += 1 + 4;
    }

    // optional float high_kick = 15;
    if (has_high_kick()) {
      total_size += 1 + 4;
    }

    // optional float dribbler = 16;
    if (has_dribbler()) {
      total_size += 2 + 4;
    }

  }
  // repeated string sensorial_info = 7;
  total_size += 1 * this->sensorial_info_size();
  for (int i = 0; i < this->sensorial_info_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sensorial_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRobotPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AIRobotPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AIRobotPackage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AIRobotPackage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AIRobotPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AIRobotPackage)
    MergeFrom(*source);
  }
}

void AIRobotPackage::MergeFrom(const AIRobotPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AIRobotPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sensorial_info_.MergeFrom(from.sensorial_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_skill()) {
      set_has_skill();
      skill_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_);
    }
    if (from.has_tactic()) {
      set_has_tactic();
      tactic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tactic_);
    }
    if (from.has_target_x()) {
      set_target_x(from.target_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_y()) {
      set_target_y(from.target_y());
    }
    if (from.has_path_planning()) {
      mutable_path_planning()->::PathPlanningPackage::MergeFrom(from.path_planning());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
    if (from.has_velocity_theta()) {
      set_velocity_theta(from.velocity_theta());
    }
    if (from.has_low_kick()) {
      set_low_kick(from.low_kick());
    }
    if (from.has_high_kick()) {
      set_high_kick(from.high_kick());
    }
    if (from.has_dribbler()) {
      set_dribbler(from.dribbler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AIRobotPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AIRobotPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRobotPackage::CopyFrom(const AIRobotPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AIRobotPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRobotPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003bf) != 0x000003bf) return false;

  return true;
}

void AIRobotPackage::Swap(AIRobotPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIRobotPackage::InternalSwap(AIRobotPackage* other) {
  std::swap(id_, other->id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(orientation_, other->orientation_);
  skill_.Swap(&other->skill_);
  tactic_.Swap(&other->tactic_);
  sensorial_info_.UnsafeArenaSwap(&other->sensorial_info_);
  std::swap(target_x_, other->target_x_);
  std::swap(target_y_, other->target_y_);
  std::swap(path_planning_, other->path_planning_);
  std::swap(velocity_x_, other->velocity_x_);
  std::swap(velocity_y_, other->velocity_y_);
  std::swap(velocity_theta_, other->velocity_theta_);
  std::swap(low_kick_, other->low_kick_);
  std::swap(high_kick_, other->high_kick_);
  std::swap(dribbler_, other->dribbler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIRobotPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRobotPackage_descriptor_;
  metadata.reflection = AIRobotPackage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIRobotPackage

// required uint32 id = 1;
bool AIRobotPackage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AIRobotPackage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AIRobotPackage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AIRobotPackage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 AIRobotPackage::id() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.id)
  return id_;
}
 void AIRobotPackage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.id)
}

// required float x = 2;
bool AIRobotPackage::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AIRobotPackage::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void AIRobotPackage::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void AIRobotPackage::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float AIRobotPackage::x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.x)
  return x_;
}
 void AIRobotPackage::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.x)
}

// required float y = 3;
bool AIRobotPackage::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AIRobotPackage::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void AIRobotPackage::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void AIRobotPackage::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float AIRobotPackage::y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.y)
  return y_;
}
 void AIRobotPackage::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.y)
}

// required float orientation = 4;
bool AIRobotPackage::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AIRobotPackage::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
void AIRobotPackage::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
void AIRobotPackage::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
 float AIRobotPackage::orientation() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.orientation)
  return orientation_;
}
 void AIRobotPackage::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.orientation)
}

// required string skill = 5;
bool AIRobotPackage::has_skill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AIRobotPackage::set_has_skill() {
  _has_bits_[0] |= 0x00000010u;
}
void AIRobotPackage::clear_has_skill() {
  _has_bits_[0] &= ~0x00000010u;
}
void AIRobotPackage::clear_skill() {
  skill_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skill();
}
 const ::std::string& AIRobotPackage::skill() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.skill)
  return skill_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AIRobotPackage::set_skill(const ::std::string& value) {
  set_has_skill();
  skill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.skill)
}
 void AIRobotPackage::set_skill(const char* value) {
  set_has_skill();
  skill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.skill)
}
 void AIRobotPackage::set_skill(const char* value, size_t size) {
  set_has_skill();
  skill_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.skill)
}
 ::std::string* AIRobotPackage::mutable_skill() {
  set_has_skill();
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.skill)
  return skill_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AIRobotPackage::release_skill() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.skill)
  clear_has_skill();
  return skill_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AIRobotPackage::set_allocated_skill(::std::string* skill) {
  if (skill != NULL) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  skill_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill);
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.skill)
}

// required string tactic = 6;
bool AIRobotPackage::has_tactic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AIRobotPackage::set_has_tactic() {
  _has_bits_[0] |= 0x00000020u;
}
void AIRobotPackage::clear_has_tactic() {
  _has_bits_[0] &= ~0x00000020u;
}
void AIRobotPackage::clear_tactic() {
  tactic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tactic();
}
 const ::std::string& AIRobotPackage::tactic() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.tactic)
  return tactic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AIRobotPackage::set_tactic(const ::std::string& value) {
  set_has_tactic();
  tactic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.tactic)
}
 void AIRobotPackage::set_tactic(const char* value) {
  set_has_tactic();
  tactic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.tactic)
}
 void AIRobotPackage::set_tactic(const char* value, size_t size) {
  set_has_tactic();
  tactic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.tactic)
}
 ::std::string* AIRobotPackage::mutable_tactic() {
  set_has_tactic();
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.tactic)
  return tactic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AIRobotPackage::release_tactic() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.tactic)
  clear_has_tactic();
  return tactic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AIRobotPackage::set_allocated_tactic(::std::string* tactic) {
  if (tactic != NULL) {
    set_has_tactic();
  } else {
    clear_has_tactic();
  }
  tactic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tactic);
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.tactic)
}

// repeated string sensorial_info = 7;
int AIRobotPackage::sensorial_info_size() const {
  return sensorial_info_.size();
}
void AIRobotPackage::clear_sensorial_info() {
  sensorial_info_.Clear();
}
 const ::std::string& AIRobotPackage::sensorial_info(int index) const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.sensorial_info)
  return sensorial_info_.Get(index);
}
 ::std::string* AIRobotPackage::mutable_sensorial_info(int index) {
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.sensorial_info)
  return sensorial_info_.Mutable(index);
}
 void AIRobotPackage::set_sensorial_info(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AIRobotPackage.sensorial_info)
  sensorial_info_.Mutable(index)->assign(value);
}
 void AIRobotPackage::set_sensorial_info(int index, const char* value) {
  sensorial_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.sensorial_info)
}
 void AIRobotPackage::set_sensorial_info(int index, const char* value, size_t size) {
  sensorial_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.sensorial_info)
}
 ::std::string* AIRobotPackage::add_sensorial_info() {
  // @@protoc_insertion_point(field_add_mutable:AIRobotPackage.sensorial_info)
  return sensorial_info_.Add();
}
 void AIRobotPackage::add_sensorial_info(const ::std::string& value) {
  sensorial_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIRobotPackage.sensorial_info)
}
 void AIRobotPackage::add_sensorial_info(const char* value) {
  sensorial_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIRobotPackage.sensorial_info)
}
 void AIRobotPackage::add_sensorial_info(const char* value, size_t size) {
  sensorial_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIRobotPackage.sensorial_info)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
AIRobotPackage::sensorial_info() const {
  // @@protoc_insertion_point(field_list:AIRobotPackage.sensorial_info)
  return sensorial_info_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
AIRobotPackage::mutable_sensorial_info() {
  // @@protoc_insertion_point(field_mutable_list:AIRobotPackage.sensorial_info)
  return &sensorial_info_;
}

// required float target_x = 8;
bool AIRobotPackage::has_target_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AIRobotPackage::set_has_target_x() {
  _has_bits_[0] |= 0x00000080u;
}
void AIRobotPackage::clear_has_target_x() {
  _has_bits_[0] &= ~0x00000080u;
}
void AIRobotPackage::clear_target_x() {
  target_x_ = 0;
  clear_has_target_x();
}
 float AIRobotPackage::target_x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.target_x)
  return target_x_;
}
 void AIRobotPackage::set_target_x(float value) {
  set_has_target_x();
  target_x_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.target_x)
}

// required float target_y = 9;
bool AIRobotPackage::has_target_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AIRobotPackage::set_has_target_y() {
  _has_bits_[0] |= 0x00000100u;
}
void AIRobotPackage::clear_has_target_y() {
  _has_bits_[0] &= ~0x00000100u;
}
void AIRobotPackage::clear_target_y() {
  target_y_ = 0;
  clear_has_target_y();
}
 float AIRobotPackage::target_y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.target_y)
  return target_y_;
}
 void AIRobotPackage::set_target_y(float value) {
  set_has_target_y();
  target_y_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.target_y)
}

// required .PathPlanningPackage path_planning = 10;
bool AIRobotPackage::has_path_planning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AIRobotPackage::set_has_path_planning() {
  _has_bits_[0] |= 0x00000200u;
}
void AIRobotPackage::clear_has_path_planning() {
  _has_bits_[0] &= ~0x00000200u;
}
void AIRobotPackage::clear_path_planning() {
  if (path_planning_ != NULL) path_planning_->::PathPlanningPackage::Clear();
  clear_has_path_planning();
}
const ::PathPlanningPackage& AIRobotPackage::path_planning() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.path_planning)
  return path_planning_ != NULL ? *path_planning_ : *default_instance_->path_planning_;
}
::PathPlanningPackage* AIRobotPackage::mutable_path_planning() {
  set_has_path_planning();
  if (path_planning_ == NULL) {
    path_planning_ = new ::PathPlanningPackage;
  }
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.path_planning)
  return path_planning_;
}
::PathPlanningPackage* AIRobotPackage::release_path_planning() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.path_planning)
  clear_has_path_planning();
  ::PathPlanningPackage* temp = path_planning_;
  path_planning_ = NULL;
  return temp;
}
void AIRobotPackage::set_allocated_path_planning(::PathPlanningPackage* path_planning) {
  delete path_planning_;
  path_planning_ = path_planning;
  if (path_planning) {
    set_has_path_planning();
  } else {
    clear_has_path_planning();
  }
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.path_planning)
}

// optional float velocity_x = 11;
bool AIRobotPackage::has_velocity_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AIRobotPackage::set_has_velocity_x() {
  _has_bits_[0] |= 0x00000400u;
}
void AIRobotPackage::clear_has_velocity_x() {
  _has_bits_[0] &= ~0x00000400u;
}
void AIRobotPackage::clear_velocity_x() {
  velocity_x_ = 0;
  clear_has_velocity_x();
}
 float AIRobotPackage::velocity_x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_x)
  return velocity_x_;
}
 void AIRobotPackage::set_velocity_x(float value) {
  set_has_velocity_x();
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_x)
}

// optional float velocity_y = 12;
bool AIRobotPackage::has_velocity_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AIRobotPackage::set_has_velocity_y() {
  _has_bits_[0] |= 0x00000800u;
}
void AIRobotPackage::clear_has_velocity_y() {
  _has_bits_[0] &= ~0x00000800u;
}
void AIRobotPackage::clear_velocity_y() {
  velocity_y_ = 0;
  clear_has_velocity_y();
}
 float AIRobotPackage::velocity_y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_y)
  return velocity_y_;
}
 void AIRobotPackage::set_velocity_y(float value) {
  set_has_velocity_y();
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_y)
}

// optional float velocity_theta = 13;
bool AIRobotPackage::has_velocity_theta() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AIRobotPackage::set_has_velocity_theta() {
  _has_bits_[0] |= 0x00001000u;
}
void AIRobotPackage::clear_has_velocity_theta() {
  _has_bits_[0] &= ~0x00001000u;
}
void AIRobotPackage::clear_velocity_theta() {
  velocity_theta_ = 0;
  clear_has_velocity_theta();
}
 float AIRobotPackage::velocity_theta() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_theta)
  return velocity_theta_;
}
 void AIRobotPackage::set_velocity_theta(float value) {
  set_has_velocity_theta();
  velocity_theta_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_theta)
}

// optional float low_kick = 14;
bool AIRobotPackage::has_low_kick() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AIRobotPackage::set_has_low_kick() {
  _has_bits_[0] |= 0x00002000u;
}
void AIRobotPackage::clear_has_low_kick() {
  _has_bits_[0] &= ~0x00002000u;
}
void AIRobotPackage::clear_low_kick() {
  low_kick_ = 0;
  clear_has_low_kick();
}
 float AIRobotPackage::low_kick() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.low_kick)
  return low_kick_;
}
 void AIRobotPackage::set_low_kick(float value) {
  set_has_low_kick();
  low_kick_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.low_kick)
}

// optional float high_kick = 15;
bool AIRobotPackage::has_high_kick() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void AIRobotPackage::set_has_high_kick() {
  _has_bits_[0] |= 0x00004000u;
}
void AIRobotPackage::clear_has_high_kick() {
  _has_bits_[0] &= ~0x00004000u;
}
void AIRobotPackage::clear_high_kick() {
  high_kick_ = 0;
  clear_has_high_kick();
}
 float AIRobotPackage::high_kick() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.high_kick)
  return high_kick_;
}
 void AIRobotPackage::set_high_kick(float value) {
  set_has_high_kick();
  high_kick_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.high_kick)
}

// optional float dribbler = 16;
bool AIRobotPackage::has_dribbler() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void AIRobotPackage::set_has_dribbler() {
  _has_bits_[0] |= 0x00008000u;
}
void AIRobotPackage::clear_has_dribbler() {
  _has_bits_[0] &= ~0x00008000u;
}
void AIRobotPackage::clear_dribbler() {
  dribbler_ = 0;
  clear_has_dribbler();
}
 float AIRobotPackage::dribbler() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.dribbler)
  return dribbler_;
}
 void AIRobotPackage::set_dribbler(float value) {
  set_has_dribbler();
  dribbler_ = value;
  // @@protoc_insertion_point(field_set:AIRobotPackage.dribbler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIDataManagerPackage::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIDataManagerPackage::AIDataManagerPackage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AIDataManagerPackage)
}

void AIDataManagerPackage::InitAsDefaultInstance() {
}

AIDataManagerPackage::AIDataManagerPackage(const AIDataManagerPackage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AIDataManagerPackage)
}

void AIDataManagerPackage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIDataManagerPackage::~AIDataManagerPackage() {
  // @@protoc_insertion_point(destructor:AIDataManagerPackage)
  SharedDtor();
}

void AIDataManagerPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIDataManagerPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIDataManagerPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIDataManagerPackage_descriptor_;
}

const AIDataManagerPackage& AIDataManagerPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  return *default_instance_;
}

AIDataManagerPackage* AIDataManagerPackage::default_instance_ = NULL;

AIDataManagerPackage* AIDataManagerPackage::New(::google::protobuf::Arena* arena) const {
  AIDataManagerPackage* n = new AIDataManagerPackage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AIDataManagerPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:AIDataManagerPackage)
  team_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AIDataManagerPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AIDataManagerPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AIRobotPackage team = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_team;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AIDataManagerPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AIDataManagerPackage)
  return false;
#undef DO_
}

void AIDataManagerPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AIDataManagerPackage)
  // repeated .AIRobotPackage team = 1;
  for (unsigned int i = 0, n = this->team_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AIDataManagerPackage)
}

::google::protobuf::uint8* AIDataManagerPackage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AIDataManagerPackage)
  // repeated .AIRobotPackage team = 1;
  for (unsigned int i = 0, n = this->team_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->team(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AIDataManagerPackage)
  return target;
}

int AIDataManagerPackage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AIDataManagerPackage)
  int total_size = 0;

  // repeated .AIRobotPackage team = 1;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIDataManagerPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AIDataManagerPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AIDataManagerPackage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AIDataManagerPackage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AIDataManagerPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AIDataManagerPackage)
    MergeFrom(*source);
  }
}

void AIDataManagerPackage::MergeFrom(const AIDataManagerPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AIDataManagerPackage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  team_.MergeFrom(from.team_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AIDataManagerPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AIDataManagerPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIDataManagerPackage::CopyFrom(const AIDataManagerPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AIDataManagerPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIDataManagerPackage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->team())) return false;
  return true;
}

void AIDataManagerPackage::Swap(AIDataManagerPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIDataManagerPackage::InternalSwap(AIDataManagerPackage* other) {
  team_.UnsafeArenaSwap(&other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AIDataManagerPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIDataManagerPackage_descriptor_;
  metadata.reflection = AIDataManagerPackage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AIDataManagerPackage

// repeated .AIRobotPackage team = 1;
int AIDataManagerPackage::team_size() const {
  return team_.size();
}
void AIDataManagerPackage::clear_team() {
  team_.Clear();
}
const ::AIRobotPackage& AIDataManagerPackage::team(int index) const {
  // @@protoc_insertion_point(field_get:AIDataManagerPackage.team)
  return team_.Get(index);
}
::AIRobotPackage* AIDataManagerPackage::mutable_team(int index) {
  // @@protoc_insertion_point(field_mutable:AIDataManagerPackage.team)
  return team_.Mutable(index);
}
::AIRobotPackage* AIDataManagerPackage::add_team() {
  // @@protoc_insertion_point(field_add:AIDataManagerPackage.team)
  return team_.Add();
}
::google::protobuf::RepeatedPtrField< ::AIRobotPackage >*
AIDataManagerPackage::mutable_team() {
  // @@protoc_insertion_point(field_mutable_list:AIDataManagerPackage.team)
  return &team_;
}
const ::google::protobuf::RepeatedPtrField< ::AIRobotPackage >&
AIDataManagerPackage::team() const {
  // @@protoc_insertion_point(field_list:AIDataManagerPackage.team)
  return team_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
