// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_ai_data_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_ai_data_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PathPlanningPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathPlanningPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIRobotPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIRobotPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIDataManagerPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIDataManagerPackage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto() {
  protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_ai_data_manager.proto");
  GOOGLE_CHECK(file != NULL);
  PathPlanningPackage_descriptor_ = file->message_type(0);
  static const int PathPlanningPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, y_),
  };
  PathPlanningPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathPlanningPackage_descriptor_,
      PathPlanningPackage::default_instance_,
      PathPlanningPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPlanningPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathPlanningPackage));
  AIRobotPackage_descriptor_ = file->message_type(1);
  static const int AIRobotPackage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, tactic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, target_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, target_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, path_planning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, velocity_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, low_kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, high_kick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, dribbler_),
  };
  AIRobotPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIRobotPackage_descriptor_,
      AIRobotPackage::default_instance_,
      AIRobotPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIRobotPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIRobotPackage));
  AIDataManagerPackage_descriptor_ = file->message_type(2);
  static const int AIDataManagerPackage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIDataManagerPackage, team_),
  };
  AIDataManagerPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIDataManagerPackage_descriptor_,
      AIDataManagerPackage::default_instance_,
      AIDataManagerPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIDataManagerPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIDataManagerPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIDataManagerPackage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5fai_5fdata_5fmanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathPlanningPackage_descriptor_, &PathPlanningPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIRobotPackage_descriptor_, &AIRobotPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIDataManagerPackage_descriptor_, &AIDataManagerPackage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto() {
  delete PathPlanningPackage::default_instance_;
  delete PathPlanningPackage_reflection_;
  delete AIRobotPackage::default_instance_;
  delete AIRobotPackage_reflection_;
  delete AIDataManagerPackage::default_instance_;
  delete AIDataManagerPackage_reflection_;
}

void protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036messages_ai_data_manager.proto\"+\n\023Path"
    "PlanningPackage\022\t\n\001x\030\001 \003(\002\022\t\n\001y\030\002 \003(\002\"\203\002"
    "\n\016AIRobotPackage\022\n\n\002id\030\001 \002(\r\022\r\n\005skill\030\002 "
    "\002(\t\022\016\n\006tactic\030\003 \002(\t\022\020\n\010target_x\030\004 \002(\002\022\020\n"
    "\010target_y\030\005 \002(\002\022+\n\rpath_planning\030\006 \002(\0132\024"
    ".PathPlanningPackage\022\022\n\nvelocity_x\030\007 \001(\002"
    "\022\022\n\nvelocity_y\030\010 \001(\002\022\026\n\016velocity_theta\030\t"
    " \001(\002\022\020\n\010low_kick\030\n \001(\002\022\021\n\thigh_kick\030\013 \001("
    "\002\022\020\n\010dribbler\030\014 \001(\002\"5\n\024AIDataManagerPack"
    "age\022\035\n\004team\030\001 \003(\0132\017.AIRobotPackage", 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_ai_data_manager.proto", &protobuf_RegisterTypes);
  PathPlanningPackage::default_instance_ = new PathPlanningPackage();
  AIRobotPackage::default_instance_ = new AIRobotPackage();
  AIDataManagerPackage::default_instance_ = new AIDataManagerPackage();
  PathPlanningPackage::default_instance_->InitAsDefaultInstance();
  AIRobotPackage::default_instance_->InitAsDefaultInstance();
  AIDataManagerPackage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5fai_5fdata_5fmanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5fai_5fdata_5fmanager_2eproto {
  StaticDescriptorInitializer_messages_5fai_5fdata_5fmanager_2eproto() {
    protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  }
} static_descriptor_initializer_messages_5fai_5fdata_5fmanager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PathPlanningPackage::kXFieldNumber;
const int PathPlanningPackage::kYFieldNumber;
#endif  // !_MSC_VER

PathPlanningPackage::PathPlanningPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PathPlanningPackage)
}

void PathPlanningPackage::InitAsDefaultInstance() {
}

PathPlanningPackage::PathPlanningPackage(const PathPlanningPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PathPlanningPackage)
}

void PathPlanningPackage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathPlanningPackage::~PathPlanningPackage() {
  // @@protoc_insertion_point(destructor:PathPlanningPackage)
  SharedDtor();
}

void PathPlanningPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathPlanningPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPlanningPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathPlanningPackage_descriptor_;
}

const PathPlanningPackage& PathPlanningPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  return *default_instance_;
}

PathPlanningPackage* PathPlanningPackage::default_instance_ = NULL;

PathPlanningPackage* PathPlanningPackage::New() const {
  return new PathPlanningPackage;
}

void PathPlanningPackage::Clear() {
  x_.Clear();
  y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathPlanningPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PathPlanningPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x = 1;
      case 1: {
        if (tag == 13) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_x())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_x;
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // repeated float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_y())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PathPlanningPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PathPlanningPackage)
  return false;
#undef DO_
}

void PathPlanningPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PathPlanningPackage)
  // repeated float x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->x(i), output);
  }

  // repeated float y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->y(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PathPlanningPackage)
}

::google::protobuf::uint8* PathPlanningPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathPlanningPackage)
  // repeated float x = 1;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->x(i), target);
  }

  // repeated float y = 2;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->y(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathPlanningPackage)
  return target;
}

int PathPlanningPackage::ByteSize() const {
  int total_size = 0;

  // repeated float x = 1;
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }

  // repeated float y = 2;
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    total_size += 1 * this->y_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPlanningPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathPlanningPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathPlanningPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathPlanningPackage::MergeFrom(const PathPlanningPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathPlanningPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPlanningPackage::CopyFrom(const PathPlanningPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPlanningPackage::IsInitialized() const {

  return true;
}

void PathPlanningPackage::Swap(PathPlanningPackage* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathPlanningPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathPlanningPackage_descriptor_;
  metadata.reflection = PathPlanningPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIRobotPackage::kIdFieldNumber;
const int AIRobotPackage::kSkillFieldNumber;
const int AIRobotPackage::kTacticFieldNumber;
const int AIRobotPackage::kTargetXFieldNumber;
const int AIRobotPackage::kTargetYFieldNumber;
const int AIRobotPackage::kPathPlanningFieldNumber;
const int AIRobotPackage::kVelocityXFieldNumber;
const int AIRobotPackage::kVelocityYFieldNumber;
const int AIRobotPackage::kVelocityThetaFieldNumber;
const int AIRobotPackage::kLowKickFieldNumber;
const int AIRobotPackage::kHighKickFieldNumber;
const int AIRobotPackage::kDribblerFieldNumber;
#endif  // !_MSC_VER

AIRobotPackage::AIRobotPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AIRobotPackage)
}

void AIRobotPackage::InitAsDefaultInstance() {
  path_planning_ = const_cast< ::PathPlanningPackage*>(&::PathPlanningPackage::default_instance());
}

AIRobotPackage::AIRobotPackage(const AIRobotPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AIRobotPackage)
}

void AIRobotPackage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tactic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_x_ = 0;
  target_y_ = 0;
  path_planning_ = NULL;
  velocity_x_ = 0;
  velocity_y_ = 0;
  velocity_theta_ = 0;
  low_kick_ = 0;
  high_kick_ = 0;
  dribbler_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIRobotPackage::~AIRobotPackage() {
  // @@protoc_insertion_point(destructor:AIRobotPackage)
  SharedDtor();
}

void AIRobotPackage::SharedDtor() {
  if (skill_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill_;
  }
  if (tactic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tactic_;
  }
  if (this != default_instance_) {
    delete path_planning_;
  }
}

void AIRobotPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIRobotPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIRobotPackage_descriptor_;
}

const AIRobotPackage& AIRobotPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  return *default_instance_;
}

AIRobotPackage* AIRobotPackage::default_instance_ = NULL;

AIRobotPackage* AIRobotPackage::New() const {
  return new AIRobotPackage;
}

void AIRobotPackage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AIRobotPackage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, target_x_);
    ZR_(target_y_, velocity_y_);
    if (has_skill()) {
      if (skill_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skill_->clear();
      }
    }
    if (has_tactic()) {
      if (tactic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tactic_->clear();
      }
    }
    if (has_path_planning()) {
      if (path_planning_ != NULL) path_planning_->::PathPlanningPackage::Clear();
    }
  }
  ZR_(velocity_theta_, dribbler_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIRobotPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AIRobotPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skill;
        break;
      }

      // required string skill = 2;
      case 2: {
        if (tag == 18) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill().data(), this->skill().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skill");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tactic;
        break;
      }

      // required string tactic = 3;
      case 3: {
        if (tag == 26) {
         parse_tactic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tactic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tactic().data(), this->tactic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tactic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_target_x;
        break;
      }

      // required float target_x = 4;
      case 4: {
        if (tag == 37) {
         parse_target_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_x_)));
          set_has_target_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_target_y;
        break;
      }

      // required float target_y = 5;
      case 5: {
        if (tag == 45) {
         parse_target_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_y_)));
          set_has_target_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_path_planning;
        break;
      }

      // required .PathPlanningPackage path_planning = 6;
      case 6: {
        if (tag == 50) {
         parse_path_planning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_planning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_velocity_x;
        break;
      }

      // optional float velocity_x = 7;
      case 7: {
        if (tag == 61) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_velocity_y;
        break;
      }

      // optional float velocity_y = 8;
      case 8: {
        if (tag == 69) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_velocity_theta;
        break;
      }

      // optional float velocity_theta = 9;
      case 9: {
        if (tag == 77) {
         parse_velocity_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_theta_)));
          set_has_velocity_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_low_kick;
        break;
      }

      // optional float low_kick = 10;
      case 10: {
        if (tag == 85) {
         parse_low_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_kick_)));
          set_has_low_kick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_high_kick;
        break;
      }

      // optional float high_kick = 11;
      case 11: {
        if (tag == 93) {
         parse_high_kick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_kick_)));
          set_has_high_kick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_dribbler;
        break;
      }

      // optional float dribbler = 12;
      case 12: {
        if (tag == 101) {
         parse_dribbler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dribbler_)));
          set_has_dribbler();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AIRobotPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AIRobotPackage)
  return false;
#undef DO_
}

void AIRobotPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AIRobotPackage)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string skill = 2;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->skill(), output);
  }

  // required string tactic = 3;
  if (has_tactic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tactic().data(), this->tactic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tactic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tactic(), output);
  }

  // required float target_x = 4;
  if (has_target_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->target_x(), output);
  }

  // required float target_y = 5;
  if (has_target_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->target_y(), output);
  }

  // required .PathPlanningPackage path_planning = 6;
  if (has_path_planning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->path_planning(), output);
  }

  // optional float velocity_x = 7;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->velocity_x(), output);
  }

  // optional float velocity_y = 8;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->velocity_y(), output);
  }

  // optional float velocity_theta = 9;
  if (has_velocity_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->velocity_theta(), output);
  }

  // optional float low_kick = 10;
  if (has_low_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->low_kick(), output);
  }

  // optional float high_kick = 11;
  if (has_high_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->high_kick(), output);
  }

  // optional float dribbler = 12;
  if (has_dribbler()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dribbler(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AIRobotPackage)
}

::google::protobuf::uint8* AIRobotPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AIRobotPackage)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string skill = 2;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->skill(), target);
  }

  // required string tactic = 3;
  if (has_tactic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tactic().data(), this->tactic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tactic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tactic(), target);
  }

  // required float target_x = 4;
  if (has_target_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->target_x(), target);
  }

  // required float target_y = 5;
  if (has_target_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->target_y(), target);
  }

  // required .PathPlanningPackage path_planning = 6;
  if (has_path_planning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->path_planning(), target);
  }

  // optional float velocity_x = 7;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->velocity_x(), target);
  }

  // optional float velocity_y = 8;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->velocity_y(), target);
  }

  // optional float velocity_theta = 9;
  if (has_velocity_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->velocity_theta(), target);
  }

  // optional float low_kick = 10;
  if (has_low_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->low_kick(), target);
  }

  // optional float high_kick = 11;
  if (has_high_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->high_kick(), target);
  }

  // optional float dribbler = 12;
  if (has_dribbler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dribbler(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AIRobotPackage)
  return target;
}

int AIRobotPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string skill = 2;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill());
    }

    // required string tactic = 3;
    if (has_tactic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tactic());
    }

    // required float target_x = 4;
    if (has_target_x()) {
      total_size += 1 + 4;
    }

    // required float target_y = 5;
    if (has_target_y()) {
      total_size += 1 + 4;
    }

    // required .PathPlanningPackage path_planning = 6;
    if (has_path_planning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_planning());
    }

    // optional float velocity_x = 7;
    if (has_velocity_x()) {
      total_size += 1 + 4;
    }

    // optional float velocity_y = 8;
    if (has_velocity_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float velocity_theta = 9;
    if (has_velocity_theta()) {
      total_size += 1 + 4;
    }

    // optional float low_kick = 10;
    if (has_low_kick()) {
      total_size += 1 + 4;
    }

    // optional float high_kick = 11;
    if (has_high_kick()) {
      total_size += 1 + 4;
    }

    // optional float dribbler = 12;
    if (has_dribbler()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIRobotPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIRobotPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIRobotPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIRobotPackage::MergeFrom(const AIRobotPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_tactic()) {
      set_tactic(from.tactic());
    }
    if (from.has_target_x()) {
      set_target_x(from.target_x());
    }
    if (from.has_target_y()) {
      set_target_y(from.target_y());
    }
    if (from.has_path_planning()) {
      mutable_path_planning()->::PathPlanningPackage::MergeFrom(from.path_planning());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_velocity_theta()) {
      set_velocity_theta(from.velocity_theta());
    }
    if (from.has_low_kick()) {
      set_low_kick(from.low_kick());
    }
    if (from.has_high_kick()) {
      set_high_kick(from.high_kick());
    }
    if (from.has_dribbler()) {
      set_dribbler(from.dribbler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIRobotPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIRobotPackage::CopyFrom(const AIRobotPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIRobotPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AIRobotPackage::Swap(AIRobotPackage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skill_, other->skill_);
    std::swap(tactic_, other->tactic_);
    std::swap(target_x_, other->target_x_);
    std::swap(target_y_, other->target_y_);
    std::swap(path_planning_, other->path_planning_);
    std::swap(velocity_x_, other->velocity_x_);
    std::swap(velocity_y_, other->velocity_y_);
    std::swap(velocity_theta_, other->velocity_theta_);
    std::swap(low_kick_, other->low_kick_);
    std::swap(high_kick_, other->high_kick_);
    std::swap(dribbler_, other->dribbler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIRobotPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIRobotPackage_descriptor_;
  metadata.reflection = AIRobotPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIDataManagerPackage::kTeamFieldNumber;
#endif  // !_MSC_VER

AIDataManagerPackage::AIDataManagerPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AIDataManagerPackage)
}

void AIDataManagerPackage::InitAsDefaultInstance() {
}

AIDataManagerPackage::AIDataManagerPackage(const AIDataManagerPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AIDataManagerPackage)
}

void AIDataManagerPackage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIDataManagerPackage::~AIDataManagerPackage() {
  // @@protoc_insertion_point(destructor:AIDataManagerPackage)
  SharedDtor();
}

void AIDataManagerPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AIDataManagerPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIDataManagerPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIDataManagerPackage_descriptor_;
}

const AIDataManagerPackage& AIDataManagerPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  return *default_instance_;
}

AIDataManagerPackage* AIDataManagerPackage::default_instance_ = NULL;

AIDataManagerPackage* AIDataManagerPackage::New() const {
  return new AIDataManagerPackage;
}

void AIDataManagerPackage::Clear() {
  team_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIDataManagerPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AIDataManagerPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AIRobotPackage team = 1;
      case 1: {
        if (tag == 10) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_team;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AIDataManagerPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AIDataManagerPackage)
  return false;
#undef DO_
}

void AIDataManagerPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AIDataManagerPackage)
  // repeated .AIRobotPackage team = 1;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AIDataManagerPackage)
}

::google::protobuf::uint8* AIDataManagerPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AIDataManagerPackage)
  // repeated .AIRobotPackage team = 1;
  for (int i = 0; i < this->team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AIDataManagerPackage)
  return target;
}

int AIDataManagerPackage::ByteSize() const {
  int total_size = 0;

  // repeated .AIRobotPackage team = 1;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIDataManagerPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIDataManagerPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIDataManagerPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIDataManagerPackage::MergeFrom(const AIDataManagerPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_.MergeFrom(from.team_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIDataManagerPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIDataManagerPackage::CopyFrom(const AIDataManagerPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIDataManagerPackage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->team())) return false;
  return true;
}

void AIDataManagerPackage::Swap(AIDataManagerPackage* other) {
  if (other != this) {
    team_.Swap(&other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIDataManagerPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIDataManagerPackage_descriptor_;
  metadata.reflection = AIDataManagerPackage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
