// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_ai_2Dsimulator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_ai_2Dsimulator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AI2DSimulatorPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AI2DSimulatorPackage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AI2DSimulatorPackage_TeamColor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AI2DSimulatorPackage_FieldSide_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5fai_5f2Dsimulator_2eproto() {
  protobuf_AddDesc_messages_5fai_5f2Dsimulator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_ai_2Dsimulator.proto");
  GOOGLE_CHECK(file != NULL);
  AI2DSimulatorPackage_descriptor_ = file->message_type(0);
  static const int AI2DSimulatorPackage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, referee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, play_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, world_facts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, enemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, team_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, field_side_),
  };
  AI2DSimulatorPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AI2DSimulatorPackage_descriptor_,
      AI2DSimulatorPackage::default_instance_,
      AI2DSimulatorPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AI2DSimulatorPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AI2DSimulatorPackage));
  AI2DSimulatorPackage_TeamColor_descriptor_ = AI2DSimulatorPackage_descriptor_->enum_type(0);
  AI2DSimulatorPackage_FieldSide_descriptor_ = AI2DSimulatorPackage_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5fai_5f2Dsimulator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AI2DSimulatorPackage_descriptor_, &AI2DSimulatorPackage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5fai_5f2Dsimulator_2eproto() {
  delete AI2DSimulatorPackage::default_instance_;
  delete AI2DSimulatorPackage_reflection_;
}

void protobuf_AddDesc_messages_5fai_5f2Dsimulator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_messages_5frobocup_5fssl_5freferee_2eproto();
  ::protobuf_AddDesc_messages_5fvision_5fmanager_2eproto();
  ::protobuf_AddDesc_messages_5fai_5fdata_5fmanager_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035messages_ai_2Dsimulator.proto\032\"message"
    "s_robocup_ssl_referee.proto\032\035messages_vi"
    "sion_manager.proto\032\036messages_ai_data_man"
    "ager.proto\"\340\002\n\024AI2DSimulatorPackage\022\032\n\004b"
    "all\030\001 \001(\0132\014.BallPackage\022\035\n\007referee\030\002 \001(\013"
    "2\014.SSL_Referee\022\014\n\004play\030\003 \001(\t\022\023\n\013world_fa"
    "cts\030\004 \003(\t\022\035\n\004team\030\005 \003(\0132\017.AIRobotPackage"
    "\022\034\n\005enemy\030\006 \003(\0132\r.RobotPackage\0223\n\nteam_c"
    "olor\030\007 \002(\0162\037.AI2DSimulatorPackage.TeamCo"
    "lor\0223\n\nfield_side\030\010 \001(\0162\037.AI2DSimulatorP"
    "ackage.FieldSide\"!\n\tTeamColor\022\n\n\006Yellow\020"
    "\000\022\010\n\004Blue\020\001\" \n\tFieldSide\022\010\n\004Left\020\000\022\t\n\005Ri"
    "ght\020\001", 485);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_ai_2Dsimulator.proto", &protobuf_RegisterTypes);
  AI2DSimulatorPackage::default_instance_ = new AI2DSimulatorPackage();
  AI2DSimulatorPackage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5fai_5f2Dsimulator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5fai_5f2Dsimulator_2eproto {
  StaticDescriptorInitializer_messages_5fai_5f2Dsimulator_2eproto() {
    protobuf_AddDesc_messages_5fai_5f2Dsimulator_2eproto();
  }
} static_descriptor_initializer_messages_5fai_5f2Dsimulator_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AI2DSimulatorPackage_TeamColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AI2DSimulatorPackage_TeamColor_descriptor_;
}
bool AI2DSimulatorPackage_TeamColor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AI2DSimulatorPackage_TeamColor AI2DSimulatorPackage::Yellow;
const AI2DSimulatorPackage_TeamColor AI2DSimulatorPackage::Blue;
const AI2DSimulatorPackage_TeamColor AI2DSimulatorPackage::TeamColor_MIN;
const AI2DSimulatorPackage_TeamColor AI2DSimulatorPackage::TeamColor_MAX;
const int AI2DSimulatorPackage::TeamColor_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* AI2DSimulatorPackage_FieldSide_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AI2DSimulatorPackage_FieldSide_descriptor_;
}
bool AI2DSimulatorPackage_FieldSide_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AI2DSimulatorPackage_FieldSide AI2DSimulatorPackage::Left;
const AI2DSimulatorPackage_FieldSide AI2DSimulatorPackage::Right;
const AI2DSimulatorPackage_FieldSide AI2DSimulatorPackage::FieldSide_MIN;
const AI2DSimulatorPackage_FieldSide AI2DSimulatorPackage::FieldSide_MAX;
const int AI2DSimulatorPackage::FieldSide_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AI2DSimulatorPackage::kBallFieldNumber;
const int AI2DSimulatorPackage::kRefereeFieldNumber;
const int AI2DSimulatorPackage::kPlayFieldNumber;
const int AI2DSimulatorPackage::kWorldFactsFieldNumber;
const int AI2DSimulatorPackage::kTeamFieldNumber;
const int AI2DSimulatorPackage::kEnemyFieldNumber;
const int AI2DSimulatorPackage::kTeamColorFieldNumber;
const int AI2DSimulatorPackage::kFieldSideFieldNumber;
#endif  // !_MSC_VER

AI2DSimulatorPackage::AI2DSimulatorPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AI2DSimulatorPackage)
}

void AI2DSimulatorPackage::InitAsDefaultInstance() {
  ball_ = const_cast< ::BallPackage*>(&::BallPackage::default_instance());
  referee_ = const_cast< ::SSL_Referee*>(&::SSL_Referee::default_instance());
}

AI2DSimulatorPackage::AI2DSimulatorPackage(const AI2DSimulatorPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AI2DSimulatorPackage)
}

void AI2DSimulatorPackage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ball_ = NULL;
  referee_ = NULL;
  play_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_color_ = 0;
  field_side_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AI2DSimulatorPackage::~AI2DSimulatorPackage() {
  // @@protoc_insertion_point(destructor:AI2DSimulatorPackage)
  SharedDtor();
}

void AI2DSimulatorPackage::SharedDtor() {
  if (play_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete play_;
  }
  if (this != default_instance_) {
    delete ball_;
    delete referee_;
  }
}

void AI2DSimulatorPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AI2DSimulatorPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AI2DSimulatorPackage_descriptor_;
}

const AI2DSimulatorPackage& AI2DSimulatorPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5fai_5f2Dsimulator_2eproto();
  return *default_instance_;
}

AI2DSimulatorPackage* AI2DSimulatorPackage::default_instance_ = NULL;

AI2DSimulatorPackage* AI2DSimulatorPackage::New() const {
  return new AI2DSimulatorPackage;
}

void AI2DSimulatorPackage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AI2DSimulatorPackage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 199) {
    ZR_(team_color_, field_side_);
    if (has_ball()) {
      if (ball_ != NULL) ball_->::BallPackage::Clear();
    }
    if (has_referee()) {
      if (referee_ != NULL) referee_->::SSL_Referee::Clear();
    }
    if (has_play()) {
      if (play_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        play_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  world_facts_.Clear();
  team_.Clear();
  enemy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AI2DSimulatorPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AI2DSimulatorPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BallPackage ball = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_referee;
        break;
      }

      // optional .SSL_Referee referee = 2;
      case 2: {
        if (tag == 18) {
         parse_referee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_play;
        break;
      }

      // optional string play = 3;
      case 3: {
        if (tag == 26) {
         parse_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_play()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->play().data(), this->play().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "play");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_world_facts;
        break;
      }

      // repeated string world_facts = 4;
      case 4: {
        if (tag == 34) {
         parse_world_facts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_world_facts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->world_facts(this->world_facts_size() - 1).data(),
            this->world_facts(this->world_facts_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "world_facts");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_world_facts;
        if (input->ExpectTag(42)) goto parse_team;
        break;
      }

      // repeated .AIRobotPackage team = 5;
      case 5: {
        if (tag == 42) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team;
        if (input->ExpectTag(50)) goto parse_enemy;
        break;
      }

      // repeated .RobotPackage enemy = 6;
      case 6: {
        if (tag == 50) {
         parse_enemy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_enemy;
        if (input->ExpectTag(56)) goto parse_team_color;
        break;
      }

      // required .AI2DSimulatorPackage.TeamColor team_color = 7;
      case 7: {
        if (tag == 56) {
         parse_team_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AI2DSimulatorPackage_TeamColor_IsValid(value)) {
            set_team_color(static_cast< ::AI2DSimulatorPackage_TeamColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_field_side;
        break;
      }

      // optional .AI2DSimulatorPackage.FieldSide field_side = 8;
      case 8: {
        if (tag == 64) {
         parse_field_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AI2DSimulatorPackage_FieldSide_IsValid(value)) {
            set_field_side(static_cast< ::AI2DSimulatorPackage_FieldSide >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AI2DSimulatorPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AI2DSimulatorPackage)
  return false;
#undef DO_
}

void AI2DSimulatorPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AI2DSimulatorPackage)
  // optional .BallPackage ball = 1;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball(), output);
  }

  // optional .SSL_Referee referee = 2;
  if (has_referee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->referee(), output);
  }

  // optional string play = 3;
  if (has_play()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->play().data(), this->play().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "play");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->play(), output);
  }

  // repeated string world_facts = 4;
  for (int i = 0; i < this->world_facts_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->world_facts(i).data(), this->world_facts(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "world_facts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->world_facts(i), output);
  }

  // repeated .AIRobotPackage team = 5;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team(i), output);
  }

  // repeated .RobotPackage enemy = 6;
  for (int i = 0; i < this->enemy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->enemy(i), output);
  }

  // required .AI2DSimulatorPackage.TeamColor team_color = 7;
  if (has_team_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->team_color(), output);
  }

  // optional .AI2DSimulatorPackage.FieldSide field_side = 8;
  if (has_field_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->field_side(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AI2DSimulatorPackage)
}

::google::protobuf::uint8* AI2DSimulatorPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AI2DSimulatorPackage)
  // optional .BallPackage ball = 1;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball(), target);
  }

  // optional .SSL_Referee referee = 2;
  if (has_referee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->referee(), target);
  }

  // optional string play = 3;
  if (has_play()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->play().data(), this->play().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "play");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->play(), target);
  }

  // repeated string world_facts = 4;
  for (int i = 0; i < this->world_facts_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_facts(i).data(), this->world_facts(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_facts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->world_facts(i), target);
  }

  // repeated .AIRobotPackage team = 5;
  for (int i = 0; i < this->team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team(i), target);
  }

  // repeated .RobotPackage enemy = 6;
  for (int i = 0; i < this->enemy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->enemy(i), target);
  }

  // required .AI2DSimulatorPackage.TeamColor team_color = 7;
  if (has_team_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->team_color(), target);
  }

  // optional .AI2DSimulatorPackage.FieldSide field_side = 8;
  if (has_field_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->field_side(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AI2DSimulatorPackage)
  return target;
}

int AI2DSimulatorPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BallPackage ball = 1;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // optional .SSL_Referee referee = 2;
    if (has_referee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referee());
    }

    // optional string play = 3;
    if (has_play()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->play());
    }

    // required .AI2DSimulatorPackage.TeamColor team_color = 7;
    if (has_team_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_color());
    }

    // optional .AI2DSimulatorPackage.FieldSide field_side = 8;
    if (has_field_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field_side());
    }

  }
  // repeated string world_facts = 4;
  total_size += 1 * this->world_facts_size();
  for (int i = 0; i < this->world_facts_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->world_facts(i));
  }

  // repeated .AIRobotPackage team = 5;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  // repeated .RobotPackage enemy = 6;
  total_size += 1 * this->enemy_size();
  for (int i = 0; i < this->enemy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AI2DSimulatorPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AI2DSimulatorPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AI2DSimulatorPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AI2DSimulatorPackage::MergeFrom(const AI2DSimulatorPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  world_facts_.MergeFrom(from.world_facts_);
  team_.MergeFrom(from.team_);
  enemy_.MergeFrom(from.enemy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ball()) {
      mutable_ball()->::BallPackage::MergeFrom(from.ball());
    }
    if (from.has_referee()) {
      mutable_referee()->::SSL_Referee::MergeFrom(from.referee());
    }
    if (from.has_play()) {
      set_play(from.play());
    }
    if (from.has_team_color()) {
      set_team_color(from.team_color());
    }
    if (from.has_field_side()) {
      set_field_side(from.field_side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AI2DSimulatorPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AI2DSimulatorPackage::CopyFrom(const AI2DSimulatorPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AI2DSimulatorPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  if (has_referee()) {
    if (!this->referee().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->team())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->enemy())) return false;
  return true;
}

void AI2DSimulatorPackage::Swap(AI2DSimulatorPackage* other) {
  if (other != this) {
    std::swap(ball_, other->ball_);
    std::swap(referee_, other->referee_);
    std::swap(play_, other->play_);
    world_facts_.Swap(&other->world_facts_);
    team_.Swap(&other->team_);
    enemy_.Swap(&other->enemy_);
    std::swap(team_color_, other->team_color_);
    std::swap(field_side_, other->field_side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AI2DSimulatorPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AI2DSimulatorPackage_descriptor_;
  metadata.reflection = AI2DSimulatorPackage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
